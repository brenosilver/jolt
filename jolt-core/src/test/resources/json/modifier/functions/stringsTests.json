{
    "input": {
        "string": "the QuIcK brOwn fox",
        "zeroIndex" : 0,
        "threeIndex" : 3,
        "trimMe" : "  tuna ",
        "peoples": "159824500000598712",
        "datetime": "2020-06-27T22:00:00"
    },

    "spec": {
    	"toCurrency": {
    		"currency": "=toCurrency('200','0.00')",
    		"currencyDecimal": "=toCurrency('200.00', '0.00')",
    		"currencyK": "=toCurrency('1200.00','0.00')",
    		"currencyKK": "=toCurrency('100200.00','0.00')",
    		"currencyKKK": "=toCurrency('1000200.00','0.00')",
    		"currencyDecimal2": "=toCurrency('0.1','0.00')",
    		"currencyDecimal3": "=toCurrency('0.61','0.00')",
    		"currencyLong": "=toCurrency('2000000000000','0.00')",
    		"currencyLong2": "=toCurrency('2000000000000.0','0.00')",
    		"currencyNumber": "=toCurrency(300,'0.00')",
    		"currencyNumberDecimal": "=toCurrency(300.00,'0.00')",
    		"currencyNumberKKK": "=toCurrency(3000000.00,'0.00')",
    		"currencyNumberBig": "=toCurrency(3000000000000,'0.00')",
    		"currencyNumberDecimal2": "=toCurrency(0.1,'0.00')",
    		"currencyNumberDecimal3": "=toCurrency(0.61,'0.00')",
    		"currencyNumberDecimal4": "=toCurrency(0.1,'0.00')",
    		"currencyNumberDecimal5": "=toCurrency(0.3,'0.00')",
    		"currencyNumberDecimal6": "=toCurrency(.03,'0.00')",
    		"currencyNumberDecimal7": "=toCurrency(0,'0.00')",
    		"currencyNumberDecimal8": "=toCurrency(565311,'00')",
    		"badArgs5": "=toCurrency(' ','0.00')",
    		"currencyDecimal9": "=toCurrency('10000000000000','0,000.00')",
    		"badArgs": "=toCurrency('','')",
    		"badArgs2": "=toCurrency(,'')",
    		"badArgs3": "=toCurrency()",
    		"badArgs4": "=toCurrency('','0.00')"
    	} ,
    	"splitGet": {
    		"datetimeZero": "=splitGet('T',@(2,datetime),0)",
    		"datetimeOne": "=splitGet('T',@(2,datetime),1)",
    		"badArgs": "=splitGet('T',@(2,datetime),2)",				// position is greated than the splitted array
    		"badArgs2": "=splitGet('T',@(2,datetime),-1)",				// position is negative
    		"badArgs3": "=splitGet('T','',0)",							// string is empty
    		"datetimeNoMatch": "=splitGet('T','2020-06-2722:00:00',0)",
    		"badArgs4": "=splitGet('T','2020-06-2722:00:00',1)",		// array size 1 and position out of bounds
    		"badArgs5": "=splitGet('T',@(2,datetimeNotFound),0)",		// mull string
    		"badArgs6": "=splitGet(4,'1234987',0)",						// separator needs to be a String
    		"badArgs7": "=splitGet('T','2020-06-27T22:00:00',0,3)"		// bad argument number
    	},
        "substringLast":{
    		"peoples": "=substringLast(@(2,peoples),11)",
    		"peoplesLong": "=substringLast(' 15555555555555555555555',11)",
    		"badArgs": "=substringLast('',11)",							// empty string
    		"badArgs2": "=substringLast('Ac123',0)",					// 0 offset
    		"badArgs3": "=substringLast('Ac123',-1)",					// negative offset
    		"badArgs4": "=substringLast(@(2,peoplesNotFound),11)",		// null string
    		"badArgs5": "=substringLast('Ac123',1,3)",					// bad argument number
    		"peoplesBlank": "=substringLast(' ',11)",
    		"peoplesShort": "=substringLast('Ac123',11)",
    		"peoplesOne": "=substringLast('Ac123',1)"
    	},
        "lower": {
            "leading":  "=toLower(@(2,string))",
            "trailing": "=toLower(^value)",
            "custom1":  "=toLower(bazinga)",
            "custom2":  "=toLower('yabadabadoo')",
            "badArgs1"  :  "=toLower(@2)"
        },
        "upper": {
            "leading": "=toUpper(@(2,string))",
            "trailing": "=toUpper(^value)",
            "custom1": "=toUpper(bazinga)",
            "custom2": "=toUpper('yabadabadoo')",
            "badArgs1"  : "=toLower(@2)"
        },
        "join": "=join('_' , @(1,lower.leading) ,  , @(1,lower.trailing))",
        "concat": {
            "basic": "=concat(@(2,lower.leading) , ' ' , @(2,lower.trailing))",
            "parens": "=concat(@(2,lower.leading) , ' (', @(2,lower.trailing), ')')"
        },
        "substring": {
            "basic1": "=substring(@(2,string), 0, 9)",
            "basic2": "=substring(@(2,string), 4, 9)",
            "outOfBounds1": "=substring(@(2,string), -4, 9)",  // start is negative
            "outOfBounds2": "=substring(@(2,string), 0, 200)", // end it way past the size of the string
            "outOfBounds3": "=substring(@(2,string), 0, 20)",  // verify that asking for one char after the end fails
            "badArgs1": "=substring(0, 9, @(2, substring))",  // input is not a string
            "badArgs2": "=substring(0, 4, 9)",      // ranges are ok, but input string is not a string
            "badArgs3": "=substring('', 0, 0)",
            "badArgs39": "=substring('', 0, 2)",
            "badArgs4": "=substring('abc', 0, 0)",  // start and end are the same, both are zero
            "badArgs5": "=substring('abc', 1, 1)",  // start and end are the same, and non-zero
            "badArgs6": "=substring('abc', 1, 0)",  // start before end
            "badArgs7": "=substring('abc', 0, 1, 2)", // too many args
            "badArgs8": "=substring('abc', 0)", // not enough args
            "custom1":  "=substring('the quick brown fox', 0, 15)",
            "custom2":  "=substring('the quick brown fox', 16, 19)",
            //
            // verify that we can actually lookup start and end indices
            "advancedLookupRanges" : "=substring(@(2,string), @(2,zeroIndex), @(2,threeIndex))"
        },
        "trim" :{
            "trimed" : "=trim(@(2,trimMe))"
        },
        "trimMe" : "=trim"
    },
    "context": {
        "value" : "JumpeD OVeR THE laZy dog"
    },

    "OVERWRITR": {
        //
        // the input
        "string" : "the QuIcK brOwn fox",
        "zeroIndex" : 0,
        "threeIndex" : 3,
        //
        // from the input, but overwritten by modify
        "trimMe" : "tuna",
        "peoples": "159824500000598712",
        "datetime": "2020-06-27T22:00:00",
        //
        // the things modify added
        "toCurrency": {
    		"currency": "200.00",
    		"currencyDecimal": "200.00",
    		"currencyK": "1200.00",
    		"currencyKK": "100200.00",
    		"currencyKKK": "1000200.00",
    		"currencyDecimal2": "0.10",
    		"currencyDecimal3": "0.61",
    		"currencyLong": "2000000000000.00",
    		"currencyLong2": "2000000000000.00",
    		"currencyNumber": 300.00,
    		"currencyNumberDecimal": 300.00,
    		"currencyNumberKKK": 3000000.00,
    		"currencyNumberBig": 3000000000000.00,
    		"currencyNumberDecimal2": 0.10,
    		"currencyNumberDecimal3": 0.61,
    		"currencyNumberDecimal4": 0.10,
    		"currencyNumberDecimal5": 0.30,
    		"currencyNumberDecimal6": 0.03,
    		"currencyNumberDecimal7": 0.00,
    		"currencyNumberDecimal8": 565311,
    		"currencyDecimal9": "10,000,000,000,000.00"
    	} ,
        "splitGet": {
    		"datetimeZero": "2020-06-27",
    		"datetimeOne": "22:00:00",
    		"datetimeNoMatch": "2020-06-2722:00:00"
    	},
        "substringLast": {
    		"peoples": "00000598712",
    		"peoplesLong": "55555555555",
    		"peoplesBlank": " ",
    		"peoplesShort": "Ac123",
    		"peoplesOne": "3"
        },
        "lower": {
            "leading": "the quick brown fox",
            "trailing": "jumped over the lazy dog",
            "custom1": "bazinga",
            "custom2": "yabadabadoo"
        },
        "upper": {
            "leading": "THE QUICK BROWN FOX",
            "trailing": "JUMPED OVER THE LAZY DOG",
            "custom1": "BAZINGA",
            "custom2": "YABADABADOO"
        },
        "join": "the quick brown fox_jumped over the lazy dog",
        "concat": {
            "basic": "the quick brown fox jumped over the lazy dog",
            "parens": "the quick brown fox (jumped over the lazy dog)"
        },
        "substring": {
            "basic1": "the QuIcK",
            "basic2": "QuIcK",
            "custom1": "the quick brown",
            "custom2": "fox",
            "advancedLookupRanges": "the"
        },
        "trim" :{
            "trimed" : "tuna"
        }
    }
}
